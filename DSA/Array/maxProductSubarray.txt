//brute
class Solution {
    public int maxProduct(int[] nums) {
        int max=Integer.MIN_VALUE;
        int n=nums.length;
        for(int i=0;i<n;i++)
        {
            for(int j=i;j<n;j++)
            {
                int prod=1;
                for(int k=i;k<=j;k++)
                {
                    prod=prod*nums[k];
                }
                max=Math.max(max,prod);
            }
        }
        return max;
    }
}

//optimal

class Solution {
    public int maxProduct(int[] nums) {
        int max=Integer.MIN_VALUE;
        int n=nums.length;
        for(int i=0;i<n;i++)
        {
            int prod=1;
            for(int j=i;j<n;j++)
            {
                prod=prod*nums[j];
                max=Math.max(max,prod);
            }
        }
        return max;
    }
}
//most optimal

class Solution {
    public int maxProduct(int[] nums) {
        int max=Integer.MIN_VALUE;
        int pref=1,suff=1;
        for(int i=0;i<nums.length;i++)
        {
           
            pref=pref*nums[i];
            suff=suff*nums[nums.length-i-1];
            max=Math.max(max,Math.max(pref,suff));
             if(pref==0)
            {
                pref=1;
            }
            if(suff==0)
            {
                suff=1;
            }
        }
        return max;
    }
}