class Solution {
    public int[] productExceptSelf(int[] nums) {
        int n=nums.length;
        int [] start=new int[n], end=new int[n],res=new int[n];

        start[0]=nums[0];
        for(int i=1;i<n;i++)
        {
            start[i]=start[i-1]*nums[i];
        }

        end[n-1]=nums[n-1];
        for(int i=n-2;i>=0;i--)
        {
            end[i]=end[i+1]*nums[i];
        }

        res[0]=end[1];
        res[n-1]=start[n-2];
        for(int i=1;i<n-1;i++)
        {
            res[i]=start[i-1]*end[i+1];
        }
        return res;
    }
}

//optimal
class Solution {
    public int[] productExceptSelf(int[] nums) {
        int n=nums.length;
        int []res=new int[n];
        int before=1;
        int after=1;
        for(int i=0;i<n;i++)
        {
            res[i]=before;
            before*=nums[i];
        }
        for(int i=n-1;i>=0;i--)
        {
            res[i]*=after;
            after*=nums[i];
        }
        return res;
    }
}